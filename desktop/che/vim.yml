# vim motions

## command + count + motion

motion:
    hjkl: move left down up right
    # words
    8k: move up 8 lines
    w: move to next word
    b: move to previous word
    e: move to end of word
    ge: move to end of previous word
    B: move to the beginning of the previous WORD

    # word: letters, numbers, and underscores
    # WORD: non-blank characters

    gg: move to the top of the file
    7gg: move to line 7 (or :7)
    10: move 10 lines down
    G: move to the bottom of the file
    '{': move to the previous paragraph
    '}': move to the next paragraph
    ctrl-f: move forward one page
    ctrl-b: move backward one page
    ctrl-u: move up half a page
    ctrl-d: move down half a page

    # horizontal
    _|^: move to the first non-blank character of the line
    g_: move to the last non-blank character of the line
    0: move to the beginning of the line
    $: move to the end of the line
    A: move to the end of the line and enter insert mode (I at bol)

    f(: move to the next ( character ( F( move to the previous)
    t(: move till character ( T( move till previous)
    ',;': repeat back/forward the last f/F, t/T motion
    '%': move to the matching parenthesis, bracket, or brace

    /: search forward
    '?': search backward
    '*': search forward for the word under the cursor
    '/## .*': search for `##` and the matching regex
    gd: go to definition of the word under the cursor
    gf: go t a file in an import
    gi: go to the last inserted mode
    d/hello: to delete everything until the first occurrence of hello
    dgn: delete match and go to next. Delete next ones with '.'

visual:
    v: start visual mode
    V: start linewise visual mode
    ctrl-v: start visual-block mode
    y: yank (copy)
    yy: yank line (or Y)
    p: paste
    P: paste before
    gP: paste and move cursor after paste
    yyp: duplicate lin
    y5j: yank 5 lines down
    yt;: yank up to the next ; (not included)
    w: select text until the next word
    vi(: select text inside ( and )
    va(: select text inside ( and ) including the parentheses
    ya(: yank text inside ( and )
    viw: select the current word

insert:
    ctrl-u: remove last inserted character
    ctrl-w: remove the last word
    ctrl-U: remove the last line
    'ctrl-r "': pastes the contents of the unnamed register
    'ctrl-r a': pastes the contents of register a
    'ctrl-r 0': pastes the contents of the yank register

    # operators
normal:
    x: delete character under cursor (like dl)
    xp: swap characters
    dd: delete line
    D: delete to end of line
    d3j: delete 3 lines down
    ddp: swap 2 lines
    d$: delete to end of line
    df(: delete to the next ( character
    d2f(: delete to the second ( character
    yf(: yank to the next ( character
    u: undo
    ctrl+r: redo
    esc|ctrl-[: go back to normal mode
    i: insert before cursor (I at bol)
    a: insert after cursor (A at eol)
    o: insert new line below (O above)
    .: repeat last command
    J: join lines
    zz: center the screen on the cursor
    r: replace character under cursor
    c: delete and insert at the same time
    C: delete to end of line and insert
    s: delete and insert unde the cursor (same as cl)
    ~: toggle case of the character under the cursor
    g~w: toggle case of the current word
    '>': adds identation (< removes)
    =: Format the code

    # ex-commands
command:
    ':%s/foo/bar/g': replace foo with bar in the whole file (%)
    ':reg': show registers
    '10,+2d a': delete line 10 to 12 and saves in register a (. current line, $ end of )

macro:
    q1: start recording and save to register 1
    q: stop recording
    \@1: play back from register 1
    \@@: play back last macro
    3@1: play back 3 times from register 1
    :reg: show registers

REGISTERS:
    '"': unnamed register is where you copy and cut stuff to
    a-z: registers you can use explicitly to copy and cut text at will
    '0': stores the last thing you have yanked
    1-9: store the last 9 things you cut by using either the delete or the change command
    '"{name of register}y{motion}': yank to register ("ayas )


# TEXT OBJECTS
text_object:
    '{operator}a{text-object}': Apply operator to all text-object including trailing whitespace
    '{operator}i{text-object}': Apply operator inside text-object
    w: for word
    s: for sentence
    \': for quotes (", `)
    p: for paragraph
    b: or (, ) for block surrounded by ()
    B: or {, } for block surrounded by {}
    '<, >': for a block surrounded by <>
    '[, ]': for a block surrounded by []
    t: for tag.

splits:
    :sp {relative-path-to-file} command to open a file in a horizontal split <CTRL-W> S
    :vsp {relative-path-to-file} command to open a file in a vertical split <CTRL-W> V




# \ escaping yaml special characters
# http://www.viemu.com/vi-vim-cheat-sheet.gif
